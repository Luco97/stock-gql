# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""user entity table"""
type UserEntity {
  username: String!
}

"""historic entity table"""
type HistoricEntity {
  """historic register ID"""
  id: ID!

  """change field of item"""
  change: String!

  """value before change"""
  previousValue: String!

  """when change occurs"""
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""item entity table"""
type ItemEntity {
  """item ID"""
  id: ID!

  """item name"""
  name: String!

  """item stock"""
  stock: Float!

  """item price"""
  price: Float!

  """item image URL"""
  imageUrl: String

  """item creation date"""
  createdAt: DateTime!

  """item latest update"""
  updatedAt: DateTime!
  deletedAt: DateTime

  """user item owner"""
  user: UserEntity
  tags: [TagEntity!]
}

type TagEntity {
  id: Float!
  name: String!
  description: String
  item_count: Float
}

"""output object of register_user"""
type SignInOutput {
  """status response"""
  status: Float!

  """message for extra info"""
  message: String!
}

"""output object in log_in mutation"""
type LogInOutput {
  """status response"""
  status: Float!

  """message for extra info"""
  message: String!
  token: String
}

type ValidateOutput {
  """status response"""
  status: Float!

  """message for extra info"""
  message: String!
  isValid: Boolean!
}

"""response in find_all query"""
type ItemsOutput {
  """array with the items"""
  items: [ItemEntity!]!

  """number of items in the array"""
  count: Float!
}

"""response objectType when any items is updated"""
type ChangeOutput {
  """message of the update"""
  message: String

  """the item with the update fields"""
  item: ItemEntity
}

"""response of changes in item"""
type HistoricOutput {
  """array of changes in item"""
  changes: [HistoricEntity!]!

  """quantity of changes in item"""
  count: Float!
}

"""response in find_all query"""
type TagsOutput {
  """array with the tags"""
  items: [TagEntity!]!

  """number of tags"""
  count: Float!
}

type Query {
  find_all(params: read_tags!): TagsOutput!

  """
  find one item, if user role is 'basic' response with his item, if user role is 'admin' response with one item from 'basic' users OR his item
  """
  find_one_item(id: Float!): [ItemEntity!]

  """some randoms to show in home or somewhere"""
  find_some_randoms: ItemEntity

  """find All changes of one item where id == 'itemId' """
  item_changes(itemId: find_all_changes!): HistoricOutput!
}

"""input to read tags"""
input read_tags {
  """quantity of tags"""
  take: Float = 10

  """number of tags to skip"""
  skip: Float = 0

  """if needs search specifically some like%"""
  name: String = ""
}

"""find all changes made in one item"""
input find_all_changes {
  """ID of item"""
  itemId: Float!

  """quantity of changes"""
  take: Float = 10

  """number of changes to skip"""
  skip: Float = 0

  """if is ASCendent or DESCendent"""
  order: String = "DESC"
}

type Mutation {
  """user register mutation"""
  register_user(user: register_user!): SignInOutput!

  """user logIn mutation"""
  sign_in(user: log_in!): LogInOutput!

  """mutation for item creation"""
  create_item(item: create_item): ItemEntity!

  """update the image of one item"""
  update_item(item: update_item!): ChangeOutput!

  """update the image of one item"""
  update_item_tags(params: update_tags!): ChangeOutput!

  """delete item mutation, only role 'admin' can delete items"""
  delete_item(id_item: Float!): ChangeOutput!
  validateToken: ValidateOutput!
  validateTypeBasic(type: String!): ValidateOutput!
  create_tag(create_input: create_tag!): TagEntity!
  update_tag(update_tag: update_tag!): Boolean!
}

"""register object for user creation"""
input register_user {
  """email for the new user"""
  email: String!

  """username for the new user"""
  username: String!

  """password for the user"""
  password: String!
}

"""log in object (with email and password)"""
input log_in {
  """email of user to log in"""
  email: String!

  """password of the user"""
  password: String!
}

"""input to create item"""
input create_item {
  """Name of the item"""
  name: String!

  """image URL of the item"""
  imageUrl: String = "https://www.yiwubazaar.com/resources/assets/images/default-product.jpg"

  """Stock of the item"""
  stock: Float = 0

  """Price of the item"""
  price: Float = 0
}

input update_item {
  """item ID"""
  id_item: Float!

  """new price in item"""
  price: Float

  """new stock in item"""
  stock: Float

  """new imageURL in item"""
  imageUrl: String

  """new name in item"""
  name: String
}

input update_tags {
  """item ID"""
  id_item: Float!

  """new tags"""
  tags_id: [Float!]!
}

"""input to create tag"""
input create_tag {
  """Name of the tag"""
  name: String!

  """description of the tag"""
  description: String!
}

input update_tag {
  """tag ID"""
  id_tag: Float!

  """new description of the tag"""
  description: String
}