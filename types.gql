# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type HistoricEntity {
  """historic register ID"""
  id: ID!

  """change field of item"""
  change: String!

  """value before change"""
  previousValue: String!

  """when change occurs"""
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ItemEntity {
  """item ID"""
  id: ID!

  """item name"""
  name: String!

  """item stock"""
  stock: Float!

  """item price"""
  price: Float!

  """item image URL"""
  imageUrl: String

  """item creation date"""
  createdAt: DateTime!

  """item latest update"""
  updatedAt: DateTime!
  deletedAt: DateTime

  """user item owner"""
  user: UserEntity
}

type UserEntity {
  id: ID!
  email: String!
  username: String!
  password: String!
  type: String!
  items: [ItemEntity!]
}

type SignInOutput {
  status: Float!
  message: String!
}

type LogInOutput {
  status: Float!
  message: String!
  token: String
}

type ItemsOutput {
  items: [ItemEntity!]!
  count: Float!
}

type ChangeOutput {
  message: String
  item: ItemEntity
}

type HistoricOutput {
  """array of changes in item"""
  changes: [HistoricEntity!]!

  """quantity of changes in item"""
  count: Float!
}

type Query {
  findAll(
    """
    find all items, if user role is 'basic' response with his items, if user role is 'admin' response with all items from 'basic' users and his items
    """
    paginate: ReadInput = {}
  ): ItemsOutput!

  """
  find one item, if user role is 'basic' response with his item, if user role is 'admin' response with one item from 'basic' users OR his item
  """
  find_one_item(id: Float!): ItemEntity

  """find All changes of one item where id == 'itemId' """
  changes(itemId: ChangesReadInput!): HistoricOutput!
}

input ReadInput {
  """quantity of items"""
  take: Float = 10

  """number of items to skip"""
  skip: Float = 0

  """field selected for order"""
  orderBy: String = "createdAt"

  """if is ASCendent or DESCendent"""
  order: String = "ASC"
}

input ChangesReadInput {
  """ID of item"""
  itemId: Float!

  """quantity of changes"""
  take: Float = 10

  """number of changes to skip"""
  skip: Float = 0

  """if is ASCendent or DESCendent"""
  order: String = "DESC"
}

type Mutation {
  """user register mutation"""
  signIn(user: SignInInput!): SignInOutput!

  """user logIn mutation"""
  logIn(user: LogInInput!): LogInOutput!

  """mutation for item creation"""
  create_item(paginate: CreateInput): ItemEntity!

  """update name of item mutation"""
  update_name_item(item: UpdateNameInput!): ChangeOutput!

  """update stock of one item mutation"""
  update_stock_item(item: UpdateStockInput!): ChangeOutput!

  """update price of one item"""
  update_price_item(item: UpdatePriceInput!): ChangeOutput!

  """update the image of one item"""
  update_image_item(item: UpdateImageInput!): ChangeOutput!

  """delete item mutation, only role 'admin' can delete items"""
  delete_item(id_item: Float!): ChangeOutput!
}

input SignInInput {
  """email for the new user"""
  email: String!

  """username for the new user"""
  username: String!

  """password for the user"""
  password: String!
}

input LogInInput {
  """email of user to log in"""
  email: String!

  """password of the user"""
  password: String!
}

input CreateInput {
  """Name of the item"""
  name: String!

  """image URL of the item"""
  imageUrl: String = "https://www.yiwubazaar.com/resources/assets/images/default-product.jpg"

  """Stock of the item"""
  stock: Float = 0

  """Price of the item"""
  price: Float = 0
}

input UpdateNameInput {
  id_item: Float!
  name: String!
}

input UpdateStockInput {
  id_item: Float!
  stock: Float!
}

input UpdatePriceInput {
  id_item: Float!
  price: Float!
}

input UpdateImageInput {
  id_item: Float!
  imageUrl: String!
}